import { NextRequest, NextResponse } from 'next/server';
import { getSupabaseService } from '@/lib/supabaseClient';
import { checkUserSubscription } from '@/utils/supabaseClient';
import { uploadOriginalImage } from '@/lib/supabase-storage';
import { createTwilioSMS, cleanPhoneNumberForSMS, type SMSWebhookPayload } from '@/lib/sms';

// Funci√≥n para limpiar n√∫mero de tel√©fono
function cleanPhoneNumber(phoneNumber: string): string {
  return cleanPhoneNumberForSMS(phoneNumber);
}

// Funci√≥n para obtener perfil del usuario
async function getUserProfile(phoneNumber: string) {
  const supabase = getSupabaseService();
  
  // Intentar diferentes formatos del n√∫mero
  const phoneFormats = [
    phoneNumber, // Formato original
    phoneNumber.replace('+', ''), // Quitar +
    phoneNumber.replace(/^34/, ''), // Quitar 34 del principio
    phoneNumber.replace(/^(\+34|34)/, ''), // Quitar +34 o 34 del principio
    `+34${phoneNumber}`, // A√±adir +34
    phoneNumber.replace('+34', ''), // Quitar +34
    `+${phoneNumber}`, // A√±adir +
    phoneNumber.replace(/\D/g, '') // Solo n√∫meros
  ];

  console.log('üîç getUserProfile - Buscando con n√∫mero:', phoneNumber);
  console.log('üì± getUserProfile - Formatos a probar:', phoneFormats);

  let profile = null;
  let foundWithFormat = '';

  // Buscar el usuario con diferentes formatos
  for (const phoneFormat of phoneFormats) {
    console.log(`üîé getUserProfile - Probando formato: "${phoneFormat}"`);
    
    const { data, error } = await supabase
      .from('profiles')
      .select('id, telefono')
      .eq('telefono', phoneFormat)
      .single();

    if (!error && data) {
      profile = data;
      foundWithFormat = phoneFormat;
      break;
    }
  }

  if (profile) {
    console.log('‚úÖ getUserProfile - Usuario encontrado:', profile.id, 'con formato:', foundWithFormat);
  } else {
    console.log('‚ùå getUserProfile - Usuario no encontrado para ning√∫n formato');
  }

  return profile;
}

// Funci√≥n para obtener integraciones del usuario
async function getUserIntegrations(phoneNumber: string) {
  const profile = await getUserProfile(phoneNumber);
  
  if (!profile) {
    console.log('‚ùå getUserIntegrations - No se encontr√≥ perfil para:', phoneNumber);
    return [];
  }

  const supabase = getSupabaseService();
  
  console.log('üîç getUserIntegrations - Buscando integraciones para usuario:', profile.id);
  
  const { data: integrations, error } = await supabase
    .from('integrations')
    .select('*')
    .eq('user_id', profile.id)
    .eq('is_active', true);

  if (error) {
    console.error('‚ùå getUserIntegrations - Error:', error);
    return [];
  }

  console.log('‚úÖ getUserIntegrations - Integraciones encontradas:', integrations?.length || 0);
  return integrations || [];
}

// Funci√≥n para generar men√∫ de integraciones
function generateIntegrationsMenu(integrations: any[], phoneNumber: string): string {
  if (!integrations || integrations.length === 0) {
    return `‚ùå No tienes integraciones configuradas.

Para configurar integraciones:
1. Ve a tu dashboard: https://reciptai.com/dashboard
2. Accede a la secci√≥n "Integraciones"
3. Configura Holded, Odoo, Xero u otras

Una vez configuradas, podr√°s enviar tickets directamente desde SMS.`;
  }

  let menu = `üîó *Integraciones disponibles:*\n\n`;
  
  integrations.forEach((integration, index) => {
    menu += `${index + 1}. ${integration.integration_type.toUpperCase()}\n`;
  });
  
  menu += `\nResponde con el n√∫mero de la integraci√≥n para enviar el √∫ltimo ticket procesado.`;
  
  return menu;
}

// Funci√≥n para enviar mensaje SMS
async function sendSMSMessage(phoneNumber: string, message: string): Promise<void> {
  try {
    const smsClient = createTwilioSMS();
    if (!smsClient) {
      console.error('‚ùå Cliente SMS no disponible');
      return;
    }

    await smsClient.sendMessage(phoneNumber, message);
  } catch (error) {
    console.error('‚ùå Error enviando SMS:', error);
  }
}

// Funci√≥n para descargar archivo multimedia
async function downloadMedia(mediaUrl: string): Promise<Buffer> {
  try {
    const smsClient = createTwilioSMS();
    if (!smsClient) {
      throw new Error('Cliente SMS no disponible');
    }

    return await smsClient.downloadMedia(mediaUrl);
  } catch (error) {
    console.error('‚ùå Error descargando media:', error);
    throw error;
  }
}

// Funci√≥n para procesar recibo usando la API de Mindee directamente
async function processReceipt(phoneNumber: string, mediaBuffer: Buffer, mediaType: string) {
  try {
    console.log('üéØ processReceipt - Iniciando procesamiento para:', phoneNumber);
    console.log('üìÑ processReceipt - Tipo de media:', mediaType);
    console.log('üìä processReceipt - Tama√±o del buffer:', mediaBuffer.length, 'bytes');

    // Obtener perfil del usuario
    const profile = await getUserProfile(phoneNumber);
    if (!profile) {
      console.log('‚ùå processReceipt - Usuario no encontrado');
      await sendSMSMessage(phoneNumber, 
        `‚ùå No tienes una cuenta registrada con este n√∫mero.

Para usar ReciptAI:
1. Reg√≠strate en: https://reciptai.com
2. A√±ade tu n√∫mero de tel√©fono en tu perfil
3. ¬°Empieza a enviar tickets por SMS!`
      );
      return;
    }

    console.log('‚úÖ processReceipt - Usuario encontrado:', profile.id);

    // Verificar suscripci√≥n
    const subscription = await checkUserSubscription(phoneNumber);
    console.log('üí≥ processReceipt - Suscripci√≥n:', subscription);

    if (!subscription.isSubscribed) {
      console.log('‚ùå processReceipt - Suscripci√≥n inactiva');
      await sendSMSMessage(phoneNumber, 
        `‚ùå Tu suscripci√≥n no est√° activa.

Para continuar usando ReciptAI:
1. Ve a: https://reciptai.com/dashboard/pricing
2. Activa tu suscripci√≥n
3. ¬°Vuelve a enviar tus tickets!`
      );
      return;
    }

    // Verificar l√≠mites de la suscripci√≥n
    if (!subscription.quotaAvailable) {
      console.log('‚ùå processReceipt - L√≠mite de tickets alcanzado');
      await sendSMSMessage(phoneNumber, 
        `‚ùå Has alcanzado el l√≠mite de tickets este mes.

Para procesar m√°s tickets:
1. Ve a: https://reciptai.com/dashboard/pricing
2. Mejora tu plan
3. ¬°Contin√∫a digitalizando tickets!`
      );
      return;
    }

    console.log('‚úÖ processReceipt - Suscripci√≥n v√°lida, procesando ticket...');

    // Crear archivo temporal para Mindee
    const fileName = `sms-receipt-${Date.now()}.${mediaType.includes('pdf') ? 'pdf' : 'jpg'}`;
    
    // Subir imagen original al storage
    console.log('üì§ processReceipt - Subiendo imagen original...');
    let imageUploadResult;
    try {
      imageUploadResult = await uploadOriginalImage(mediaBuffer, fileName, profile.id);
      console.log('‚úÖ processReceipt - Imagen subida:', imageUploadResult.path);
    } catch (uploadError) {
      console.error('‚ùå processReceipt - Error subiendo imagen:', uploadError);
      await sendSMSMessage(phoneNumber, '‚ùå Error procesando la imagen. Int√©ntalo de nuevo.');
      return;
    }

    // Procesar con Mindee API directamente
    console.log('üß† processReceipt - Procesando con Mindee...');
    
    try {
      // Llamar a la API de upload-receipt con FormData
      const formData = new FormData();
      const blob = new Blob([mediaBuffer], { type: mediaType });
      const file = new File([blob], fileName, { type: mediaType });
      formData.append('file', file);
      formData.append('userId', profile.id);
      formData.append('source', 'sms');
      if (imageUploadResult.path) {
        formData.append('originalImagePath', imageUploadResult.path);
      }
      if (imageUploadResult.publicUrl) {
        formData.append('originalImageUrl', imageUploadResult.publicUrl);
      }

      const response = await fetch(`${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/upload-receipt`, {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (result.success && result.data) {
        console.log('‚úÖ processReceipt - Procesado exitosamente:', result.data.id);

        // Enviar confirmaci√≥n por SMS
        const confirmationMessage = `‚úÖ *Ticket procesado exitosamente*

üìÑ *Detalles:*
‚Ä¢ Proveedor: ${result.data.proveedor || 'No detectado'}
‚Ä¢ Total: ${result.data.total ? `${result.data.total}‚Ç¨` : 'No detectado'}
‚Ä¢ Fecha: ${result.data.fecha_emision || 'No detectada'}

üîó Ver detalles: https://reciptai.com/dashboard/recibos

üí° *Comandos disponibles:*
‚Ä¢ "ayuda" - Ver todos los comandos
‚Ä¢ "estado" - Ver tu estado de cuenta
‚Ä¢ "integraciones" - Configurar env√≠os autom√°ticos`;

        await sendSMSMessage(phoneNumber, confirmationMessage);
      } else {
        throw new Error(result.error || 'Error procesando ticket');
      }

    } catch (mindeeError) {
      console.error('‚ùå processReceipt - Error con Mindee:', mindeeError);
      await sendSMSMessage(phoneNumber, 
        `‚ùå Error procesando el ticket. 

Posibles causas:
‚Ä¢ La imagen no es clara
‚Ä¢ No es un ticket v√°lido
‚Ä¢ Error temporal del servicio

Int√©ntalo de nuevo con una imagen m√°s clara.`
      );
    }

  } catch (error) {
    console.error('‚ùå processReceipt - Error general:', error);
    await sendSMSMessage(phoneNumber, '‚ùå Error procesando el ticket. Int√©ntalo de nuevo.');
  }
}

// Funci√≥n para manejar comandos de texto
async function handleTextCommand(phoneNumber: string, command: string) {
  const lowerCommand = command.toLowerCase().trim();
  
  console.log('üí¨ handleTextCommand - Comando recibido:', lowerCommand, 'de:', phoneNumber);

  switch (lowerCommand) {
    case 'ayuda':
    case 'help':
      await sendSMSMessage(phoneNumber, 
        `ü§ñ *ReciptAI - Comandos disponibles:*

üì∏ *Enviar tickets:*
‚Ä¢ Env√≠a una foto de tu ticket
‚Ä¢ Formatos: JPG, PNG, PDF

üí¨ *Comandos de texto:*
‚Ä¢ "ayuda" - Ver esta ayuda
‚Ä¢ "estado" - Ver tu estado de cuenta
‚Ä¢ "integraciones" - Configurar env√≠os autom√°ticos

üîó *Dashboard:* https://reciptai.com/dashboard

¬øNecesitas ayuda? Contacta con soporte.`
      );
      break;

    case 'estado':
    case 'status':
      const profile = await getUserProfile(phoneNumber);
      if (!profile) {
        await sendSMSMessage(phoneNumber, 
          `‚ùå No tienes una cuenta registrada.

Reg√≠strate en: https://reciptai.com`
        );
        return;
      }

      const subscription = await checkUserSubscription(phoneNumber);
      
      await sendSMSMessage(phoneNumber, 
        `üìä *Tu estado de cuenta:*

üí≥ Suscripci√≥n: ${subscription.isSubscribed ? 'Activa' : 'Inactiva'}
üìÑ Cuota disponible: ${subscription.quotaAvailable ? 'S√≠' : 'No'}
‚úÖ Tickets restantes: ${subscription.remainingQuota}

üîó Dashboard: https://reciptai.com/dashboard`
      );
      break;

    case 'integraciones':
    case 'integrations':
      const integrations = await getUserIntegrations(phoneNumber);
      const menuMessage = generateIntegrationsMenu(integrations, phoneNumber);
      await sendSMSMessage(phoneNumber, menuMessage);
      break;

    default:
      // Verificar si es un n√∫mero (selecci√≥n de integraci√≥n)
      const integrationNumber = parseInt(lowerCommand);
      if (!isNaN(integrationNumber) && integrationNumber > 0) {
        const integrations = await getUserIntegrations(phoneNumber);
        
        if (integrationNumber <= integrations.length) {
          const selectedIntegration = integrations[integrationNumber - 1];
          await sendSMSMessage(phoneNumber, 
            `üîó Funci√≥n de integraci√≥n con ${selectedIntegration.integration_type.toUpperCase()} en desarrollo.

Por ahora, puedes enviar tickets manualmente desde:
https://reciptai.com/dashboard/recibos`
          );
        } else {
          await sendSMSMessage(phoneNumber, '‚ùå N√∫mero de integraci√≥n inv√°lido. Env√≠a "integraciones" para ver las opciones.');
        }
      } else {
        await sendSMSMessage(phoneNumber, 
          `‚ùì Comando no reconocido: "${command}"

Env√≠a "ayuda" para ver los comandos disponibles.`
        );
      }
      break;
  }
}

// Handler GET - Verificaci√≥n del webhook (Twilio no lo requiere, pero lo mantenemos por compatibilidad)
export async function GET(request: NextRequest) {
  return NextResponse.json({ 
    status: 'SMS Webhook activo',
    timestamp: new Date().toISOString()
  });
}

// Handler POST - Procesar mensajes SMS entrantes
export async function POST(request: NextRequest) {
  try {
    console.log('üì® SMS Webhook - Mensaje entrante recibido');
    
    // Obtener datos del formulario (Twilio env√≠a form data)
    const formData = await request.formData();
    
    // Convertir FormData a objeto
    const formDataObj: Record<string, string> = {};
    for (const [key, value] of formData.entries()) {
      formDataObj[key] = value.toString();
    }
    
    // Crear payload con propiedades requeridas
    const payload: SMSWebhookPayload = {
      MessageSid: formDataObj.MessageSid || '',
      AccountSid: formDataObj.AccountSid || '',
      From: formDataObj.From || '',
      To: formDataObj.To || '',
      Body: formDataObj.Body || '',
      NumMedia: formDataObj.NumMedia || '0',
      MediaUrl0: formDataObj.MediaUrl0,
      MediaContentType0: formDataObj.MediaContentType0,
      ...formDataObj
    };
    
    console.log('üìã SMS Webhook - Payload recibido:', JSON.stringify(payload, null, 2));

    const { From: fromNumber, Body: messageBody, NumMedia, MediaUrl0, MediaContentType0 } = payload;

    if (!fromNumber) {
      console.log('‚ùå SMS Webhook - N√∫mero de origen faltante');
      return NextResponse.json({ error: 'N√∫mero de origen requerido' }, { status: 400 });
    }

    const cleanedPhoneNumber = cleanPhoneNumber(fromNumber);
    console.log('üìû SMS Webhook - N√∫mero limpiado:', cleanedPhoneNumber);

    // Verificar si hay archivos multimedia
    const hasMedia = NumMedia && parseInt(NumMedia) > 0;
    
    if (hasMedia && MediaUrl0) {
      console.log('üìé SMS Webhook - Archivo multimedia detectado');
      console.log('üîó SMS Webhook - URL del archivo:', MediaUrl0);
      console.log('üìÑ SMS Webhook - Tipo de contenido:', MediaContentType0);

      try {
        // Descargar el archivo
        const mediaBuffer = await downloadMedia(MediaUrl0);
        
        // Procesar el recibo
        await processReceipt(cleanedPhoneNumber, mediaBuffer, MediaContentType0 || 'image/jpeg');
        
      } catch (error) {
        console.error('‚ùå SMS Webhook - Error procesando multimedia:', error);
        await sendSMSMessage(cleanedPhoneNumber, '‚ùå Error procesando el archivo. Int√©ntalo de nuevo.');
      }
      
    } else if (messageBody && messageBody.trim()) {
      console.log('üí¨ SMS Webhook - Mensaje de texto recibido:', messageBody);
      
      // Manejar comando de texto
      await handleTextCommand(cleanedPhoneNumber, messageBody.trim());
      
    } else {
      console.log('‚ùì SMS Webhook - Mensaje vac√≠o o sin contenido v√°lido');
      await sendSMSMessage(cleanedPhoneNumber, 
        `‚ùì No se detect√≥ contenido v√°lido.

Para usar ReciptAI:
üì∏ Env√≠a una foto de tu ticket
üí¨ Env√≠a "ayuda" para ver comandos

üîó Dashboard: https://reciptai.com/dashboard`
      );
    }

    return NextResponse.json({ status: 'ok' });

  } catch (error) {
    console.error('‚ùå SMS Webhook - Error general:', error);
    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 });
  }
}
